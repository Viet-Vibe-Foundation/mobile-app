generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EventCategory {
  id        String       @id @default(cuid())
  title     String
  bgColor   String
  textColor String
  type      CategoryType
  eventId   String?
  isBold    Boolean      @default(false)
  isItalic  Boolean      @default(false)
  Event     Event[]      @relation("EventToEventCategory")
}

model Event {
  id            String          @id @default(cuid())
  title         String          @unique
  description   String?
  location      String?
  startTime     String?
  capacity      Int?
  ticketsSold   Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  endDate       DateTime        @default(now())
  eventType     EventType
  price         Int?            @default(0)
  startDate     DateTime?       @default(now())
  endTime       String?
  days          String[]
  isPublished   Boolean         @default(false)
  imgUrl        String?
  formLink      String?
  keyName       String          @unique
  EventSchedule EventSchedule[]
  EventTicket   EventTicket[]
  EventCategory EventCategory[] @relation("EventToEventCategory")
  User          User[]          @relation("EventToUser")

  @@index([id])
}

model Ticket {
  id          String     @id @default(cuid())
  title       String?
  description String?
  price       Float
  eventId     String
  published   Boolean    @default(false)
  updatedAt   DateTime   @default(now())
  createdAt   DateTime   @updatedAt
  consumed    Boolean    @default(false)
  purchases   Purchase[]
}

model Purchase {
  id            String  @id @default(cuid())
  userId        String
  ticketId      String
  paymentMethod String?
  ticket        Ticket  @relation(fields: [ticketId], references: [id])
  user          User    @relation(fields: [userId], references: [id])

  @@unique([userId, ticketId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  role          Role         @default(USER)
  age           String?
  phone         String?      @unique
  address       String?
  password      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  posts         Post[]
  likedPosts    PostLikes[]
  visitedPosts  PostVisits[]
  purchases     Purchase[]
  Event         Event[]      @relation("EventToUser")
}

model Post {
  id          String       @id @default(cuid())
  title       String       @unique
  content     String?
  summary     String?
  imgUrl      String?
  isPublished Boolean?     @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  postLikes   PostLikes[]
  postVisits  PostVisits[]

  @@unique([id, userId])
  @@index([id])
}

model PostLikes {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model PostVisits {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model EventSchedule {
  id          String  @id
  description String?
  startTime   String?
  endTime     String?
  eventId     String
  position    Int
  Event       Event   @relation(fields: [eventId], references: [id])
}

model EventTicket {
  id        String     @id
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  type      TicketType
  price     Float
  capacity  Int
  eventId   String
  Event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  HOST
}

enum CategoryType {
  Primary
  Secondary
}

enum EventType {
  CLASS
  CONCERT
}

enum TicketType {
  NonMember
  Member
  DropIn
}
